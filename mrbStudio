#!/bin/bash

# mrbStudio - Marios' rsync backup studio
#
# Copyright 2009-2012 Marios Andreopoulos ( opensource at andmarios dot com )
# Distributed under the terms of the GNU General Public License v3 or later
#
#
# A script for versioned backups of both local and remote filesystems.
# - For the most basic use of local filesystems, it uses rsync with hard links.
# - For remote sites, usage is more difficult. Specific setup is needed at both ends. Ssh access for remote is required.
# - When using a btrfs filesystem as the backup medium, snapshots may be used if desired instead of hard links.
#
# This script uses input files for setting up backup configurations.
# Check the examples that are provided with it as well as the variables' initialization below.
#
# The functionality of mrbStudio is basic yet adequate. This is for 3 reasons:
# - Backups are essential, so they should always work. The simpler a script, the most probable to keep working.
# - System commands are run a lot (mount, rsync, etc) and probably under superuser permissions. Keep failure points low.
# - A small script is easy for anyone to extend with the functionality he needs.
#
#
# Changelog
#  Version 3.01: fixed bug where script didn't create btrfs subvolume for the first backup of a source if set to btrfs
#                mode, thus failing to create snapshots for consequent backups.
#  Version 3.00: added btrfs snapshot support
#                replaced cp -l with rsync --link-dest option (much faster for large filesystems)
#                code restructure and clean up
#                excluded files' list may be inside a main configuration file instead of a seperate file
#                better documentation
#                caution: this version changed the names of some variables, older configuration files may need changes
#  Version 2.00: added versioned backup for remote linux systems through ssh/rsync
#  Version 1.00: versioned backup of local fileystems
#
# Notice: this script is written using 120 characters as maximum line width.


# Variables' initialization. Those of which are needed for your setup, should be set in a configuration file.
# M means mandatory, O means optional, N means not used
source=""                      #M Set the source path of the backup
destination_parent=""          #M Set the destination path for the parent folder of the backup
prefix=""                      #M Prefix for destination folder (-datetime will be appended).
                               #  Should be unique prefix, only backups from one source use it in destination_parent.
                               #  (developer info: datetime has always to be appended as it is used for sorting too)
exclude_file=""                #O File including list of files/directories to exclude from backup (rsync format).
                               #  Can be used in conjunction with excludes inside main configuration file.
exclude_temp_file=""           #N Internal variable.
exclude_command=""             #N Internal variable.
mount_source_command=""        #O System command to use to mount the source medium (locally or at remote machine).
umount_source_command=""       #O System command to use to unmount the source medium.
mount_destination_command=""   #O System command to use to nmount the destination medium.
umount_destination_command=""  #O System command to use to unmount the destination medium.
remote_shell=""                #O System command to connect to remote shell (!!!needs more explanation!!!)
                               #  Also doubles as remote mode switch. If it isn't empty, the script enters remote mode.
remote_sync=""                 #O Remote system command for remote rsync (!!!needs more explanation!!!
destination_fstype=""          #O If set to btrfs, btrfs snapshots will be used insted of hard links.
program_version="3.01"         #N Internal variable.



# A basic help and version switch implementation.
version_info(){
  cat <<EOF
mrbStudio, version $program_version
Copyright (C) 2009-12 Marios Andreopoulos ( opensource@andmarios.com )
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

More information can be found at:
<http://www.andmarios.com>
<http://github.com/andmarios/mrbStudio>
EOF
}
help_info(){
  cat <<EOF
Usage: mrbStudio [FILE]
FILE is a mrbStudio configuration style text file.
Check sample.mrbStudio and the other example files that came with this script.

Report bugs to opensource@andmarios.com
mrbStudio github <http://github.com/andmarios/mrbStudio>
EOF
}
case "$1" in
  -v | --version ) version_info; exit;;
  -h | --help    ) help_info; exit;;
esac


# If for any reason we exit before completion, this function will run to umount mediums and rm temp files)
clean_before_exit()
{
  # Remove temp excludes file if we created one.
  [ -z "$exclude_temp_file" ] || rm "$exclude_temp_file"

  # Umount source medium if needed.
  if [ ! -z "$umount_source_command" ]; then
    echo "Umounting source."
    $umount_source_command || echo "Umount source returned error."
  fi

  # Umount destination medium if needed.
  if [ ! -z "$umount_destination_command" ]; then
    echo "Umounting destination_parent."
    $umount_destination_command || echo "Umount destination_parent returned error. (may not a problem)"
  fi
}


## Here starts the main body of the script.


# Check if configuration file exists.
[ ! -f "$1" ] && { echo "Configuration file \"$1\" not found. Try --help if you need to learn more. Exiting."; exit 1; }
# Load configuration file. Because conf file may include exclusion list, we can't simply source it.
temp_source="$(mktemp)"
egrep -v "^[[:space:]]*#" "$1" | sed -n '0,/EXCLUDE_START/ { /EXCLUDE_START/b; p }' >> "$temp_source"
egrep -v "^[[:space:]]*#" "$1" | sed -n '/EXCLUDE_STOP/,$ { /EXCLUDE_STOP/b; p }' >> "$temp_source"
source "$temp_source"
rm "$temp_source"


# Check if source needs to be mounted and mount it.
if [ ! -z "$mount_source_command" ]; then
  echo "Mounting source."
  if ! $mount_source_command; then
    echo "Mount returned error. Exiting. (maybe it was already mounted?)"
  exit 1
  fi
fi


# If the source is local, check if it exists and isn't empty. Haven't find a way to check a source at a remote system.
if [ -z "$remote_shell" ]; then # Here remote_shell variable is also used as a mean to check if we are in remote mode.
  if [ ! -d "$source" ]; then
    echo "Source not found. Exiting."
    clean_before_exit
  exit 1
  elif [ -z "$(ls -Al "$source")" ]; then
    echo "Source is empty. Exiting."
    clean_before_exit
  exit 1
  fi
else
  echo "Source is in remote machine. Skipping existance check".
fi


# Test if destination_parent and prefix are given.
[ -z "$destination_parent" ] && { echo "No destination_parent folder given. Exiting."; clean_before_exit; exit 1; }
[ -z "$prefix" ] && { echo "No prefix given. Exiting."; clean_before_exit; exit 1; }


# Mount destination medium if needed.
if [ ! -z "$mount_destination_command" ]; then
  echo "Mounting destination_parent."
  if ! $mount_destination_command; then
    echo "Mount returned error. Exiting. (maybe it was already mounted?)"
    clean_before_exit
  exit 1
  fi
fi


# Test if destination parent folder exists
[ ! -d "$destination_parent" ] && { echo "Target folder not found. Exiting"; clean_before_exit; exit 1; }


# Check if an excludes file is given and if it exists, prepare the relevant rsync command section.
if [ -z "$exclude_file" ]; then
  echo "No external file with excludes list given."
elif [ ! -f "$exclude_file" ]; then
  echo "Excludes file wrong. Exiting."
  clean_before_exit
exit 1
else
  echo "Loading excludes from external file."
  exclude_command="--exclude-from=$exclude_file"
fi


# Check for excluded files list inside the main configuration file, prepare the relevant rsync command section.
if [ ! -z "$( sed -n '/EXCLUDE_START/,/EXCLUDE_STOP/ {//!p}' "$1" )" ]; then
  echo "Loading exclusion list from main configuration file."
  exclude_temp_file="$(mktemp)"
  egrep -v "^[[:space:]]*#" "$1" | sed -n '/EXCLUDE_START/,/EXCLUDE_STOP/ {//!p}' > "$exclude_temp_file"
  [ ! -z "$exclude_command" ] && cat "$exclude_file" >> "$exclude_temp_file"
  exclude_command="--exclude-from=$exclude_temp_file"
else
  echo "Main configuration file doesn't have an exclusion list embedded."
fi


# Find the most recent backup to use for cp -l or btrfs snapshot. Variable stays empty if recent doesn't exist.
recent="$(ls -td "$destination_parent/$prefix"* 2>/dev/null | sort -r | head -n1)"
recent="${recent//\/\///}" # removing potential double slashes, prettifying output.
# This will be used to identify the new backup (datetime)
moment="$(date +%Y.%m.%d.%H%M)"
# The actual directory of the backup.
destination="$destination_parent/$prefix-$moment"
destination="${destination//\/\///}"


# Check if recent exists and create btrfs snapshot (or subvolume for the 1st backup) if using btrfs fstype.
if [ -z "$recent" ]; then 
  echo "Did not found another valid backup. Creating new."
  if [[ "$destination_fstype" == [Bb][Tt][Rr][Ff][Ss] ]]; then
    echo "Using btrfs snapshots. Creating btrfs subvolume to $prefix-$moment."
    if ! btrfs subvolume create "$destination" >/dev/null; then
      echo "Btrfs subvolume creation returned error, exiting. Please check $destination_parent for unwanted directories."
      clean_before_exit
    exit 1
    fi
  fi
elif [ ! -d "$recent" ]; then # Probably not needed but it doesn't harm either.
  echo "Did not found another valid backup. Creating new."
  if [[ "$destination_fstype" == [Bb][Tt][Rr][Ff][Ss] ]]; then
    echo "Using btrfs snapshots. Creating btrfs subvolume to $prefix-$moment."
    if ! btrfs subvolume create "$destination" >/dev/null; then
      echo "Btrfs subvolume creation returned error, exiting. Please check $destination_parent for unwanted directories."
      clean_before_exit
    exit 1
    fi
  fi
else
  echo "Most recent backup: $(basename $recent)."
  if [[ "$destination_fstype" == [Bb][Tt][Rr][Ff][Ss] ]]; then
    echo "Using btrfs snapshots. Snapshotting to $prefix-$moment."
    if ! btrfs subvolume snapshot "$recent" "$destination" >/dev/null; then
      echo "Btrfs snapshot creation returned error, exiting. Please check $destination_parent for unwanted directories."
      clean_before_exit
    exit 1
    fi
  else
    echo "Using hardlinks. Target directory $prefix-$moment."
  fi
fi


# Create backup.
echo "Rsyncing to $destination."
# To prevent a bug, we have to seperate the exclude_command if empty, or create an empty exclude file.
[ -z "$exclude_command" ] && exclude_temp_file="$(mktemp)" && exclude_command="--exclude-from=$exclude_temp_file"
if [ -z "$remote_shell" ]; then
  echo "Local mode."
  if [[ "$destination_fstype" == [Bb][Tt][Rr][Ff][Ss] ]]; then
    rsync -a --stats -h --delete --delete-excluded "$exclude_command" "$source/" "$destination/"
  else
    rsync -a --stats -h --link-dest="$recent" --delete --delete-excluded "$exclude_command" "$source/" "$destination/"
  fi
else
  echo "Remote mode."
  if [[ "$destination_fstype" == [Bb][Tt][Rr][Ff][Ss] ]]; then
    rsync -a --stats -h -z -e "$remote_shell" --rsync-path="$remote_rsync" \
      --delete --delete-excluded $exclude_command "$source/" "$destination/"
  else
    rsync -a --stats -h -z -e "$remote_shell" --rsync-path="$remote_rsync" --link-dest="$recent" \
      --delete --delete-excluded "$exclude_command" "$source/" "$destination/"
  fi
fi


clean_before_exit

exit 0
