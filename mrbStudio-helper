#!/bin/bash

# mrbStudio-helper
#
# Copyright 2013 Marios Andreopoulos ( opensource at andmarios dot com )
# Distributed under the terms of the GNU General Public License v3 or later
#
# A helper script for mrbStudio that you run as the mount command.
# Its purpose is to support LVM snapshots and MySQL table locking.
# This script should be uploaded to the remote machine.

MYSQL_PASS=""
LVM_SNAPSHOT=""
SOURCE=""
TARGET=""
ACTION=""
LVM_PAD="pUn3tanE"

help(){
cat << EOF
mrbStudio-helper script v4.10

usage: $0 options [-s|-k]

A helper script for mrbStudio that you run as the mount command.
It purpose is to support LVM snapshots and MySQL table locking.
This script should be uploaded to the remote machine.

OPTIONS:
   -h      Show this message
   -m      mysql root password if you want database locking (optional, requires LVM)
   -p      partition to backup (if LVM, then /dev/VGNAME/LVNAME)
   -l      lvm snapshot name (do not give a path)
   -t      target directory to mount source
   -s      mount source to target and create snapshot if you use LVM
   -k      umount source from target and remove snapshot

Examples:
$0 -m "\$(cat /path/to/passfile)" -p /dev/vg-1/partition -l backup -t /mnt/backups -s
$0 -p /dev/vg-1/partition -l backup -t /mnt/backups -k
$0 -p /dev/sdXY -t /mnt/backups -k
EOF
}


# parse input
while getopts “hm:p:l:t:sk” OPTION
do
  case $OPTION in
    h) help; exit 1;;
    m) MYSQL_PASS="$OPTARG";;
    p) SOURCE="$OPTARG";;
    l) LVM_SNAPSHOT="$OPTARG";;
    t) TARGET="$OPTARG";;
    s) ACTION="s";;
    k) ACTION="k";;
    ?) help; exit ;;
  esac
done


# some sanity checks, probably not all
if ! [ -b "$SOURCE" ]; then
  echo "Remote: Source not found. Exiting."
  exit 1
#elif [ -n "$LVM_SNAPSHOT" ] && lvs | grep -sq "$(basename "$LVM_SNAPSHOT")"; then
#  echo "Remote: a LVM snapshot with the same name exists. Aborting."
#  exit 1
elif [ ! -d "$TARGET" ]; then
  echo "Remote: target directory does not exist. Aborting."
  exit 1
fi
if [ -n "$MYSQL_PASS" ] && [ -z "$LVM_SNAPSHOT" ]; then
  echo "Remote: MySQL locking can be used only in conjuction with LVM snapshots. Ignoring."
fi


# mount target, etc
if [[ "$ACTION" == s ]]; then
# Create LVM snapshot if no MYSQL locking is needed.
  if [ -n "$LVM_SNAPSHOT" ] && [ -z "$MYSQL_PASS" ]; then
    echo "Remote: Creating LVM snapshot."
#   if you fail to create snapshot
    if ! lvcreate -s -L1G -n "$(basename "$LVM_SNAPSHOT")-$LVM_PAD" "$SOURCE"; then
      echo "Remote: could not create LVM snapshot. Aborting."
      exit 1
    fi
  fi


# Lock MySQL, create LVM snapshot and unlock MySQL.
  if [ -n "$LVM_SNAPSHOT" ]; then
    echo "Remote: Locking MySQL and creating LVM snapshot."
#   if you fail to create snapshot
    if ! echo "FLUSH TABLES WITH READ LOCK; \
               system lvcreate -s -L1G -n \"$(basename "$LVM_SNAPSHOT")-$LVM_PAD\" \"$SOURCE\"; \
               UNLOCK TABLES;" | mysql -uroot -p"${MYSQL_PASS}"; then
      echo "Remote: could not lock MySQL and/or create LVM snapshot. Aborting."
      exit 1
    else
      echo "Remote: snapshot created, MySQL unlocked."
    fi
  fi


# mount source/snapshot to target
  [ -n "$LVM_SNAPSHOT" ] && SOURCE="$(dirname "$SOURCE")/$(basename "$LVM_SNAPSHOT")-$LVM_PAD"
  echo "Remote: mounting target."
# if you fail to mount target exit
  if ! mount "$SOURCE" "$TARGET"; then
    echo "Remote: Failed to mount target. Aborting."
    exit 1
  fi


# umount target, etc
elif [[ "$ACTION" == k ]]; then
# umount target
  [ -n "$LVM_SNAPSHOT" ] && SOURCE_SNAPSHOT="$(dirname "$SOURCE")/$(basename "$LVM_SNAPSHOT")-$LVM_PAD"
  echo "Remote: umounting target."
# if you fail to mount target exit
  if ! umount "$TARGET"; then
    echo "Remote: Failed to umount target. Aborting."
    exit 1
# remove LVM snapshot.
  elif [ -n "$LVM_SNAPSHOT" ]; then
    echo "Remote: removing LVM snapshot."
    if ! lvremove -f "$SOURCE_SNAPSHOT"; then
      echo "Remote: failed to remove LVM snapshot. Aborting."
      exit 1
    fi
  fi
fi