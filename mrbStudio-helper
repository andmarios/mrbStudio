#!/bin/bash

# mrbStudio-helper
#
# Copyright 2012 Marios Andreopoulos ( opensource at andmarios dot com )
# Distributed under the terms of the GNU General Public License v3 or later
#
# A helper script for mrbStudio that you run as the mount command.
# Its purpose is to support LVM snapshots and MySQL table locking.
# This script should be uploaded to the remote machine.

MYSQL_PASS=""
LVM_SNAPSHOT=""
SOURCE=""
TARGET=""
ACTION=""

help(){
cat << EOF
usage: $0 options

A helper script for mrbStudio that you run as the mount command.
It purpose is to support LVM snapshots and MySQL table locking.
This script should be uploaded to the remote machine.

OPTIONS:
   -h      Show this message
   -m      mysql root password if you want database locking (optional)
   -p      partition to backup (if LVM, then /dev/VGNAME/LVNAME)
   -l      lvm snapshot name (do not give a path)
   -t      target directory to mount source
   -s      mount source to target and create snapshot / lock database
           if you use LVM, the database will stay locked only while we create the snapshot
   -k      umount source from target and remove snapshot / unlock database if not using LVM

Examples:
$0 -m "\$(cat /path/to/passfile)" -p /dev/vg-1/partition -l backup -t /mnt/backups -s
$0 -m "password" -p /dev/vg-1/partition -l backup -t /mnt/backups -k
$0 -m "password" -p /dev/sdXY -t /mnt/backups -k
EOF
}

# helper functions for code that is used frequently
unlock_mysql_lvm(){
  if [ -n "$MYSQL_PASS" ]; then
    if echo "unlock tables;" | mysql -uroot -p"${MYSQL_PASS}"; then
      echo "Remote: MySQL unlocked." 
    else
      echo "Remote: ERROR! Failed to unlock MySQL. Please do it manually."
    fi
  fi
}
unlock_mysql_non_lvm(){
  if [ -n "$MYSQL_PASS" ] && [ -z "$LVM_SNAPSHOT" ]; then
    if echo "unlock tables;" | mysql -uroot -p"${MYSQL_PASS}"; then
      echo "Remote: MySQL unlocked."
    else
      echo "Remote: ERROR! Failed to unlock MySQL. Please do it manually."
    fi
  fi
}

# parse input
while getopts “hm:p:l:t:sk” OPTION
do
  case $OPTION in
    h) help; exit 1;;
    m) MYSQL_PASS="$OPTARG";;
    p) SOURCE="$OPTARG";;
    l) LVM_SNAPSHOT="$OPTARG";;
    t) TARGET="$OPTARG";;
    s) ACTION="s";;
    k) ACTION="k";;
    ?) help; exit ;;
  esac
done

# some sanity checks, probably not all
if ! [ -d "$SOURCE" ]; then
  echo "Remote: Source not found. Exiting."
  exit 1
elif [ -n "$LVM_SNAPSHOT" ] && lvs | grep -sq "$(basename "$LVM_SNAPSHOT")"; then
  echo "Remote: a LVM snapshot with the same name exists. Aborting."
  exit 1
elif [ ! -d "$TARGET" ]; then
  echo "Remote: target directory does not exist. Aborting."
  exit 1
fi


# mount target, etc
if [[ "$ACTION" == s ]]; then

# lock MySQL
  if [ -n "$MYSQL_PASS" ]; then
    echo "Remote: Locking MySQL."
    if ! echo "flush tables with read lock; flush logs;" | mysql -uroot -p"${MYSQL_PASS}"; then
      echo "Remote: MySQL lock failed. Aborting."
      exit 1
    fi
  fi

# create LVM snapshot and unlock MySQL
  if [ -n "$LVM_SNAPSHOT" ]; then
    echo "Remote: Creating LVM snapshot."
#   if you fail to create snapshot
    if ! lvcreate --snapshot –-size=1G --name="$(basename "$LVM_SNAPSHOT")" "$SOURCE"; then
      echo "Remote: could not create LVM snapshot. Aborting."
      unlock_mysql_lvm
      exit 1
#   if you succeed to create snapshot
    else
     unlock_mysql_lvm
    fi
  fi

# mount source/snapshot to target
  [ -n "$LVM_SNAPSHOT" ] && SOURCE="$(dirname "$SOURCE")/$(basename "$LVM_SNAPSHOT")"
  echo "Remote: mounting target."
# if you fail to mount target, unlock MySQL and exit
  if ! mount "$SOURCE" "$TARGET"; then
    echo "Remote: Failed to mount target. Aborting."
    unlock_mysql_non_lvm
    exit 1
# Inform that since the user didn't use LVM, now MySQL has to stay locked.
  elif [ -z "$LVM_SNAPSHOT" ]; then
    echo "Remote: Remember, MySQL will remain locked until you umount target."
  fi

# umount target, etc
elif [[ "$ACTION" == k ]]; then
# umount target
  [ -n "$LVM_SNAPSHOT" ] && SOURCE="$(dirname "$SOURCE")/$(basename "$LVM_SNAPSHOT")"
  echo "Remote: umounting target."
# if you fail to mount target, unlock MySQL and exit
  if ! umount "$TARGET"; then
    echo "Remote: Failed to umount target. Aborting."
    unlock_mysql_non_lvm
    exit 1
# remove LVM snapshot.
  elif [ -n "$LVM_SNAPSHOT" ]; then
    echo "Remote: removing LVM snapshot."
    if ! lvremove "$SOURCE"; then
      echo "Remote: failed to remove LVM snapshot. Aborting."
      unlock_mysql_non_lvm
      exit 1
    fi
# unlock MySQL if needed
  else
   unlock_mysql_non_lvm  
  fi
fi